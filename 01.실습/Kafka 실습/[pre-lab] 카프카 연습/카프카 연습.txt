Kafka : 이벤트 소싱(발생한 모든 이벤트)들을 기록하고 저장하는 공간

Apache Kafka ?
    - 메세징 시스템
    - Activity Tracking
    - 모니터링 데이터 수집 ( Gather metrics )
    - 로그 수집 ( Log Aggregation )
    - Stream Processing 
    - 시스템간의 종속성 분리 ( De-coupling of System Dependencies )
    - Spark, Storm, Flink, Hadoop 등 많은 빅데이터 기술과 통합하여 사용

Topic?
    - 특정 데이터 스트림, 즉 메세지를 구분 하는 통로
    - 하나의 카프카에 여러 메세지가 뒤섞여서 오가는데 거기서 토픽으로 구분하여 원하는 메세지를 찾는 방식
    - 데이터베이스의 테이블, 카톡의 단톡방 과 비슷한 개념
    - 토픽은 여러개 만들수 있고, 이름으로 구분됨

Partition?
    - 토픽은 파티션을 나눌수 있음
    - 토픽당 데이터를 분산 처리하는 단위
    - 병렬 처리와 많은 양의 데이터 처리를 위해서 파티션을 늘리수 있음
    - 늘리기만 하고 줄이는 것은 안됨
    - 각각의 파티션은 0부터 1, 2, … 의 Index를 가짐
    - 파티션 별로 증가되는 아이디 , 즉 Offset 라는 값을 가지게 됨.

토픽과 파티션
    - Offset 은 파티션에서만 의미가 있음
    - 파티션 3개가 있다면 각각의 파티션의 offset 0번은 다른 데이터를 가지게됨 
    - 파티션 안에서는 데이터의 순서가 보장
    - 파티션이 복수개 일때, 1번과 2번 파티션에 적재되는 데이터의 순서성 보장이 안됨 
    - 파티션에 데이터가 한번 쓰여지면 변경이 안됨
    - key 를 주지 않으면 어느 파티션에 데이터가 들어갈지 모름


Broker ?
    - 카프카를 클러스터로 구성하였을 때, 각각의 서버를 Broker 라고 부름
    - 각각의 브로커는 토픽 파티션을 가짐
    - 어떤 브로커에 접속해도 전체 카프카 클러스터에 접속 가능
    - 브로커는 3개로 시작하여 100개까지 늘어날 수 있음

Zookeeper(주키퍼)?
    - 분산 애플리케이션 코디네이터
    - 주키퍼는 브로커를 관리.
    - 파티션의 리더 선출을 도움.
    - 카프카의 변경에 대하여 알림을 준다 ( 토픽생성, 브로커 die, 브로커 up, 토픽 삭제 )
    - 카프카는 주키퍼 없이 동작 못함
    - 주키퍼 클러스터는 홀수로 동작함 ( Leader/Follower 선출때문에 짝수로 동작 못함)
    - 주키퍼 Leader 는 write, Follower 는 read 작업을 함


파티션의 Leader?
    - 파티션의 리더만 데이터를 읽고, 쓰기가 가능
    - 나머지 파티션은 ISR(In Sync Replica) 역할을 하게됨
    - ISR 은 리더의 데이터를 체크하여 복제하고, 리더가 장애시 리더 역할을 함
